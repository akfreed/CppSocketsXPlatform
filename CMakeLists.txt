cmake_minimum_required(VERSION 3.15)

# C++11
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Solution
project (CppSocketsXPlat)

# Warning flags
if(MSVC)
    set(WARNING_FLAGS /W4 /WX
        /experimental:external # VS 16.9 and older
        /external:I ${CMAKE_SOURCE_DIR}/thirdparty/
        /external:W0 # Causes an unfortunate warning due to a missing flag for the new 16.10 external headers flag. Fixed in CMake 3.21.
    )
elseif(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
    # Update if necessary
    set(WARNING_FLAGS -Wall -Wextra -pedantic -Wconversion -Werror)
endif()

# Needed for clang-tidy
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)


# Dependencies
find_package(Threads REQUIRED)
add_subdirectory(thirdparty/)

# Projects
add_subdirectory(StrapperNet)
add_subdirectory(EchoServers)
add_subdirectory(UnitTest)


# clang-tidy needs a compile_commands.json file.
# Put a symlink in the source tree so clang-tidy can find it without needing to know the build directory.
# If this wasn't done, pre-commit, which calls clang-tidy, would need to pass the build path to clang-tidy as an argument.
# However pre-commit only supports hard-coded arguments, and there is no way to know the build path in advance.
#
# CMAKE_EXPORT_COMPILE_COMMANDS is only supported by Make and Ninja.
# MSVC users who need to use clang-tidy will need to do this:
#     install Ninja
#     create a dir for ninja build e.g. mkdir build_ninja && cd build_ninja
#     cmake .. -G Ninja
if(CMAKE_GENERATOR STREQUAL "Ninja" OR CMAKE_GENERATOR STREQUAL "Unix Makefiles")
    # The compile_commands.json file is generated by cmake, but not until later in the generation step.
    # Create a symlink / shortcut in the source tree that will point to the future file.
    # If the file doesn't exist, create a dummy file that will be overwritten when cmake completes.
    if(NOT EXISTS ${CMAKE_BINARY_DIR}/compile_commands.json)
        file(WRITE ${CMAKE_BINARY_DIR}/compile_commands.json "")
    endif()
    if(NOT EXISTS ${CMAKE_SOURCE_DIR}/compile_commands.json)
        execute_process(COMMAND ${CMAKE_COMMAND} -E create_symlink ${CMAKE_BINARY_DIR}/compile_commands.json ${CMAKE_SOURCE_DIR}/compile_commands.json)
    endif()
else()
    file(REMOVE ${CMAKE_SOURCE_DIR}/compile_commands.json)
endif()

# Set Unit Tests as the start-up project
set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT UnitTest)
